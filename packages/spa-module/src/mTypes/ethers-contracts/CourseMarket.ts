/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CourseMarket {
  export type CourseStruct = {
    courseId: BigNumberish;
    title: string;
    description: string;
    price: BigNumberish;
    isActive: boolean;
    totalPurchases: BigNumberish;
  };

  export type CourseStructOutput = [
    courseId: bigint,
    title: string,
    description: string,
    price: bigint,
    isActive: boolean,
    totalPurchases: bigint
  ] & {
    courseId: bigint;
    title: string;
    description: string;
    price: bigint;
    isActive: boolean;
    totalPurchases: bigint;
  };

  export type PurchaseStruct = {
    courseId: BigNumberish;
    student: AddressLike;
    purchaseTime: BigNumberish;
    paidAmount: BigNumberish;
  };

  export type PurchaseStructOutput = [
    courseId: bigint,
    student: string,
    purchaseTime: bigint,
    paidAmount: bigint
  ] & {
    courseId: bigint;
    student: string;
    purchaseTime: bigint;
    paidAmount: bigint;
  };
}

export interface CourseMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "coursePurchasers"
      | "courses"
      | "hasPurchased"
      | "metaCoinToken"
      | "owner"
      | "renounceOwnership"
      | "studentPurchases"
      | "transferOwnership"
      | "purchaseCourse"
      | "withdrawTokens"
      | "getAllCourses"
      | "getCourse"
      | "getCoursePurchasers"
      | "getCoursePurchasersCount"
      | "hasUserPurchased"
      | "getStudentPurchases"
      | "getStudentPurchaseCount"
      | "checkPurchaseStatus"
      | "getContractTokenBalance"
      | "getUserTokenBalance"
      | "getUserAllowance"
      | "emergencyWithdrawTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CoursePurchased" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "coursePurchasers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPurchased",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metaCoinToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studentPurchases",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCourses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCourse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoursePurchasers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoursePurchasersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserPurchased",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentPurchases",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentPurchaseCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPurchaseStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAllowance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "coursePurchasers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaCoinToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studentPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoursePurchasers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoursePurchasersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentPurchaseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPurchaseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawTokens",
    data: BytesLike
  ): Result;
}

export namespace CoursePurchasedEvent {
  export type InputTuple = [
    courseId: BigNumberish,
    student: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    courseId: bigint,
    student: string,
    price: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    courseId: bigint;
    student: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CourseMarket extends BaseContract {
  connect(runner?: ContractRunner | null): CourseMarket;
  waitForDeployment(): Promise<this>;

  interface: CourseMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  coursePurchasers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  courses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        courseId: bigint;
        title: string;
        description: string;
        price: bigint;
        isActive: boolean;
        totalPurchases: bigint;
      }
    ],
    "view"
  >;

  hasPurchased: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  metaCoinToken: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  studentPurchases: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        courseId: bigint;
        student: string;
        purchaseTime: bigint;
        paidAmount: bigint;
      }
    ],
    "view"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  purchaseCourse: TypedContractMethod<
    [_courseId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawTokens: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllCourses: TypedContractMethod<
    [],
    [CourseMarket.CourseStructOutput[]],
    "view"
  >;

  getCourse: TypedContractMethod<
    [_courseId: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        title: string;
        description: string;
        price: bigint;
        isActive: boolean;
        totalPurchases: bigint;
      }
    ],
    "view"
  >;

  getCoursePurchasers: TypedContractMethod<
    [_courseId: BigNumberish],
    [string[]],
    "view"
  >;

  getCoursePurchasersCount: TypedContractMethod<
    [_courseId: BigNumberish],
    [bigint],
    "view"
  >;

  hasUserPurchased: TypedContractMethod<
    [_courseId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;

  getStudentPurchases: TypedContractMethod<
    [_student: AddressLike],
    [CourseMarket.PurchaseStructOutput[]],
    "view"
  >;

  getStudentPurchaseCount: TypedContractMethod<
    [_student: AddressLike],
    [bigint],
    "view"
  >;

  checkPurchaseStatus: TypedContractMethod<
    [_courseId: BigNumberish, _student: AddressLike],
    [
      [boolean, bigint, bigint] & {
        purchased: boolean;
        purchaseTime: bigint;
        paidAmount: bigint;
      }
    ],
    "view"
  >;

  getContractTokenBalance: TypedContractMethod<[], [bigint], "view">;

  getUserTokenBalance: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserAllowance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  emergencyWithdrawTokens: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "coursePurchasers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "courses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        courseId: bigint;
        title: string;
        description: string;
        price: bigint;
        isActive: boolean;
        totalPurchases: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasPurchased"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "metaCoinToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "studentPurchases"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint, bigint] & {
        courseId: bigint;
        student: string;
        purchaseTime: bigint;
        paidAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchaseCourse"
  ): TypedContractMethod<[_courseId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllCourses"
  ): TypedContractMethod<[], [CourseMarket.CourseStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCourse"
  ): TypedContractMethod<
    [_courseId: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        title: string;
        description: string;
        price: bigint;
        isActive: boolean;
        totalPurchases: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoursePurchasers"
  ): TypedContractMethod<[_courseId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCoursePurchasersCount"
  ): TypedContractMethod<[_courseId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasUserPurchased"
  ): TypedContractMethod<
    [_courseId: BigNumberish, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentPurchases"
  ): TypedContractMethod<
    [_student: AddressLike],
    [CourseMarket.PurchaseStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentPurchaseCount"
  ): TypedContractMethod<[_student: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkPurchaseStatus"
  ): TypedContractMethod<
    [_courseId: BigNumberish, _student: AddressLike],
    [
      [boolean, bigint, bigint] & {
        purchased: boolean;
        purchaseTime: bigint;
        paidAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractTokenBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTokenBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAllowance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdrawTokens"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CoursePurchased"
  ): TypedContractEvent<
    CoursePurchasedEvent.InputTuple,
    CoursePurchasedEvent.OutputTuple,
    CoursePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CoursePurchased(uint256,address,uint256,uint256)": TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;
    CoursePurchased: TypedContractEvent<
      CoursePurchasedEvent.InputTuple,
      CoursePurchasedEvent.OutputTuple,
      CoursePurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
